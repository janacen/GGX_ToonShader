Shader "Unlit/CelShading"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
        _SSSTex ("SSSTex", 2D) = "white" {}//用于实现次表面散射 表现出皮肤通透的效果
        _ILMTex ("ILMTex", 2D) = "white" {} // r 高光位置 g 固定阴影 b 高光强度 a 物体内部的线条 具体参考（本村式线）
        _Specular("Specular",Color) = (1,1,1,1)
        _Gloss("Gloss",Range(1.0,20)) = 20
        _aoThreshold("aoThreshold",Range(0.0,0.45)) = 0.4
    }
    SubShader
    {
        Tags
        {
            "RenderType"="Opaque"
        }
        LOD 100

        Pass
        {
            Tags
            {
                "LightMode" = "ForwardBase"
            }
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            // make fog work
            #pragma multi_compile_fog
            #include "UnityCG.cginc"
            #include "Lighting.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
                float3 normal :NORMAL;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                UNITY_FOG_COORDS(1)
                float4 vertex : SV_POSITION;
                float3 worldNormal :TEXCOORD1;
            };

            sampler2D _MainTex;
            sampler2D _SSSTex;
            sampler2D _ILMTex;

            float4 _MainTex_ST;
            float _Gloss;
            float4 _Specular;
            float _aoThreshold;

            v2f vert(appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = TRANSFORM_TEX(v.uv, _MainTex);
                o.worldNormal = mul(unity_ObjectToWorld, v.normal);
                return o;
            }

            fixed4 frag(v2f i) : SV_Target
            {
                float3 worldLightDir = normalize(_WorldSpaceLightPos0.xyz);
                float dotL = dot(normalize(i.worldNormal), worldLightDir);
                float4 ILMParam = tex2D(_ILMTex, i.uv);

                fixed4 mainColor = tex2D(_MainTex, i.uv);
                float3 specular = _Specular.rgb * _LightColor0.rgb * ILMParam.r * ILMParam.b * _Gloss;//高光

                fixed3 col = mainColor.rgb;
                col *= half3(ILMParam.a, ILMParam.a, ILMParam.a);//增加线条细节
                fixed4 finalColor = fixed4(col.rgb + specular, 1);


                fixed4 shadowColor = fixed4(col.rgb * tex2D(_SSSTex, i.uv).rgb, 1);
                if (step(0.5, dotL) == 0 || ILMParam.g < _aoThreshold) //控制阴影部分
                {
                    finalColor = shadowColor;
                }


                return finalColor;
            }
            ENDCG
        }
    }
}
